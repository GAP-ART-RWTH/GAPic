
			camera.position.z = -5;
            camera.lookAt(0,0,-1);

            scene.background = new THREE.Color( 'white' );

            //rederer for lables
            const labelRenderer = new CSS2DRenderer();
            labelRenderer.setSize( window.innerWidth, window.innerHeight );
            labelRenderer.domElement.style.position = 'absolute';
            labelRenderer.domElement.style.top = '0px';
            document.body.appendChild( labelRenderer.domElement );
            
            //controls for mouse 
            const controls = new OrbitControls( camera, labelRenderer.domElement );

            //controls in the top right corner
            var gui = new GUI();

            const animationFolder = gui.addFolder("Animations");

            animationFolder.add(guiParameters, 'speedX', 0, 5);
            animationFolder.add(guiParameters, 'speedY', 0, 5);
            animationFolder.add(guiParameters, 'speedZ', 0, 5);
            animationFolder.open();

            const controlFolder = gui.addFolder("Controls");
            controlFolder.add(guiParameters, "transparency", 0, 1);
            controlFolder.add(guiParameters, "edgeVisibility");
            controlFolder.add(guiParameters, "vertexVisibility");
            controlFolder.add(guiParameters, "vertexlabelVisibility");
            controlFolder.add(guiParameters, "vertexSize", 0.1, 3);
            controlFolder.open();

            const planeFolder = gui.addFolder("Intersection Planes");
            planeFolder.add(guiParameters, 'planeXactive');
            planeFolder.add(guiParameters, 'planeX', -1.5, 1.5);
            planeFolder.add(guiParameters, 'planeYactive');
            planeFolder.add(guiParameters, 'planeY', -1.5, 1.5);
            planeFolder.add(guiParameters, 'planeZactive');
            planeFolder.add(guiParameters, 'planeZ', -1.5, 1.5);

            // add both roots to the scene
            scene.add( meshRoot );
            scene.add( wireRoot );
            scene.add( vertexRoot );
            scene.add( vertexlabelRoot );
            scene.add( edgeRoot );
            scene.add( ringRoot );
            scene.add( normalsRoot );


            function animate() {
                requestAnimationFrame( animate );
                meshRoot.rotation.x += guiParameters.speedX/100;
                meshRoot.rotation.y += guiParameters.speedY/100;
                meshRoot.rotation.z += guiParameters.speedZ/100;

                wireRoot.rotation.x += guiParameters.speedX/100;
                wireRoot.rotation.y += guiParameters.speedY/100;
                wireRoot.rotation.z += guiParameters.speedZ/100;

                vertexRoot.rotation.x += guiParameters.speedX/100;
                vertexRoot.rotation.y += guiParameters.speedY/100;
                vertexRoot.rotation.z += guiParameters.speedZ/100;

                vertexlabelRoot.rotation.x += guiParameters.speedX/100;
                vertexlabelRoot.rotation.y += guiParameters.speedY/100;
                vertexlabelRoot.rotation.z += guiParameters.speedZ/100;

                edgeRoot.rotation.x += guiParameters.speedX/100;
                edgeRoot.rotation.y += guiParameters.speedY/100;
                edgeRoot.rotation.z += guiParameters.speedZ/100;

                ringRoot.rotation.x += guiParameters.speedX/100;
                ringRoot.rotation.y += guiParameters.speedY/100;
                ringRoot.rotation.z += guiParameters.speedZ/100;

                normalsRoot.rotation.x += guiParameters.speedX/100;
                normalsRoot.rotation.y += guiParameters.speedY/100;
                normalsRoot.rotation.z += guiParameters.speedZ/100;

                //update the light when the camera moves (with orbitcontrols)
                light.position.set(camera.position.x, camera.position.y, camera.position.z);

                planeX.constant = guiParameters.planeX;
                planeY.constant = guiParameters.planeY;
                planeZ.constant = guiParameters.planeZ;

                localPlanes = [];
                if(guiParameters.planeXactive){
                    localPlanes.push(planeX);
                }
                if(guiParameters.planeYactive){
                    localPlanes.push(planeY);
                }
                if(guiParameters.planeZactive){
                    localPlanes.push(planeZ);
                }

                //update stuff that changes from the gui
                meshRoot.traverse( function( node ) {
                    if ( node instanceof THREE.Mesh ) {
                        node.material.opacity = guiParameters.transparency;
                        node.material.clippingPlanes = localPlanes;
                    }
                } );

                edgeRoot.traverse( function( node ) {
                    if ( node instanceof THREE.LineSegments ) {
                        node.material.visible = guiParameters.edgeVisibility;
                    }
                } );

                vertexRoot.traverse( function( node ) {
                    if ( node instanceof THREE.Mesh ) {
                        node.material.visible = guiParameters.vertexVisibility;
                        node.scale.setScalar(guiParameters.vertexSize);
                    }
                } );

                vertexlabelRoot.traverse( function( node ) {
                    if( node instanceof CSS2DObject) {
                        node.visible = guiParameters.vertexlabelVisibility;
                    }
                } );

                controls.update();

                renderer.localClippingEnabled = true;

                renderer.render( scene, camera );
                labelRenderer.render( scene, camera );
            }
            animate();

            //resize of window size changes
            window.addEventListener( 'resize', onWindowResize );
            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize( window.innerWidth, window.innerHeight );
                labelRenderer.setSize( window.innerWidth, window.innerHeight );
            }
</script>